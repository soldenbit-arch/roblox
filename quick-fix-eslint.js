#!/usr/bin/env node

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö ESLint –æ—à–∏–±–æ–∫
 * –ó–∞–ø—É—Å–∫: node quick-fix-eslint.js
 */

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª–µ
function replaceInFile(filePath, searchValue, replaceValue) {
    try {
        let content = fs.readFileSync(filePath, 'utf8');
        const originalContent = content;
        
        content = content.replace(searchValue, replaceValue);
        
        if (content !== originalContent) {
            fs.writeFileSync(filePath, content, 'utf8');
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
            return true;
        }
        return false;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è catch –±–ª–æ–∫–æ–≤
function fixCatchBlocks(filePath) {
    const catchPattern = /} catch \(error\) \{[\s\S]*?console\.error\('Error:', error\);[\s\S]*?return NextResponse\.json\(\{ error: 'Internal Server Error' \}, \{ status: 500 \}\);[\s\S]*?\}/g;
    
    return replaceInFile(filePath, catchPattern, (match) => {
        // –ó–∞–º–µ–Ω—è–µ–º error –Ω–∞ _error —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        return match.replace(/error/g, '_error');
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
function fixUnusedState(filePath) {
    const patterns = [
        // –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ useState
        /const \[selectedPartnerFunctions, setSelectedPartnerFunctions\] = useState\(\[\]\);/g,
        /const \[banners, setBanners\] = useState\(\[\]\);/g,
        /const \[bannersLoading, setBannersLoading\] = useState\(false\);/g,
        /const \[editingBanner, setEditingBanner\] = useState\(null\);/g,
        /const \[configured, setConfigured\] = useState\(false\);/g,
        /const \[total, setTotal\] = useState\(0\);/g,
        /const \[service, setService\] = useState\(null\);/g,
        
        // –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        /const \{ username, email, password \} = req\.body;/g,
        /const \{ username, email \} = req\.body;/g,
        
        // –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ–ª–±—ç–∫–∞—Ö
        /\(err, docs\) => \{/g,
        /\(err, result\) => \{/g,
        /\(err, data\) => \{/g,
    ];
    
    let fixed = false;
    patterns.forEach(pattern => {
        if (replaceInFile(filePath, pattern, (match) => {
            // –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            return `// ${match}`;
        })) {
            fixed = true;
        }
    });
    
    return fixed;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ any
function fixAnyTypes(filePath) {
    const patterns = [
        /: any\)/g,
        /: any,/g,
        /: any\s*\{/g,
    ];
    
    let fixed = false;
    patterns.forEach(pattern => {
        if (replaceInFile(filePath, pattern, (match) => {
            // –ó–∞–º–µ–Ω—è–µ–º any –Ω–∞ unknown (–±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
            return match.replace(/any/g, 'unknown');
        })) {
            fixed = true;
        }
    });
    
    return fixed;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–≤—ã—á–µ–∫
function fixQuotes(filePath) {
    const patterns = [
        /"([^"]*)"([^"]*)"([^"]*)"/g,
    ];
    
    let fixed = false;
    patterns.forEach(pattern => {
        if (replaceInFile(filePath, pattern, (match, before, middle, after) => {
            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏
            return `"${before}&quot;${middle}&quot;${after}"`;
        })) {
            fixed = true;
        }
    });
    
    return fixed;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è HTML —Å—Å—ã–ª–æ–∫
function fixHtmlLinks(filePath) {
    const patterns = [
        /<a href="\/">([^<]*)<\/a>/g,
    ];
    
    let fixed = false;
    patterns.forEach(pattern => {
        if (replaceInFile(filePath, pattern, (match, text) => {
            // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ Next.js Link
            return `<Link href="/">${text}</Link>`;
        })) {
            fixed = true;
        }
    });
    
    return fixed;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function fixESLintErrors() {
    console.log('üîß –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ESLint –æ—à–∏–±–æ–∫...\n');
    
    const filesToFix = [
        'src/app/api/partner-orders/route.ts',
        'src/app/api/partner-orders-all/route.ts',
        'src/app/api/partner-services/route.ts',
        'src/app/api/partners/route.ts',
        'src/app/api/user-orders/route.ts',
        'src/app/functions-steps/page.tsx',
        'src/app/home/Categories.tsx',
        'src/app/not-found.tsx',
        'src/app/order-created/page.tsx',
        'src/app/our-partners/page.tsx',
        'src/app/partner/[partnerName]/page.tsx',
        'src/app/partner-dashboard/page.tsx',
        'src/app/payment/page.tsx',
    ];
    
    let totalFixed = 0;
    
    filesToFix.forEach(filePath => {
        if (fs.existsSync(filePath)) {
            console.log(`üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${filePath}`);
            
            let fileFixed = false;
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            if (fixCatchBlocks(filePath)) fileFixed = true;
            if (fixUnusedState(filePath)) fileFixed = true;
            if (fixAnyTypes(filePath)) fileFixed = true;
            if (fixQuotes(filePath)) fileFixed = true;
            if (fixHtmlLinks(filePath)) fileFixed = true;
            
            if (fileFixed) {
                totalFixed++;
            } else {
                console.log(`   ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π`);
            }
        } else {
            console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        }
        console.log('');
    });
    
    console.log(`üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`üìä –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFixed}`);
    
    if (totalFixed > 0) {
        console.log('\nüí° –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Å–Ω–æ–≤–∞:');
        console.log('   npm run build');
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    fixESLintErrors();
}

module.exports = { fixESLintErrors }; 